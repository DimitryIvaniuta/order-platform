-- Stores request idempotency keys & cached responses
CREATE TABLE IF NOT EXISTS idempotency_request (
                                                   id                    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                   tenant_id             VARCHAR(64)  NOT NULL,
    key_hash              CHAR(64)     NOT NULL, -- SHA-256 of Idempotency-Key
    request_fingerprint   CHAR(64)     NOT NULL, -- SHA-256 of normalized request payload/fields
    response_bytes        BYTEA,
    status_code           INT          CHECK (status_code BETWEEN 100 AND 599),
    created_at            TIMESTAMPTZ  NOT NULL DEFAULT now(),
    updated_at            TIMESTAMPTZ  NOT NULL DEFAULT now(),
    CONSTRAINT uq_idem_key UNIQUE (key_hash)
    );

CREATE INDEX IF NOT EXISTS idx_idem_created_at ON idempotency_request(created_at);

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_idem_set_updated_at'
  ) THEN
CREATE TRIGGER trg_idem_set_updated_at
    BEFORE UPDATE ON idempotency_request
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
END IF;
END $$;

-- Webhook inbox (raw payloads, signature, dedupe)
CREATE TABLE IF NOT EXISTS webhook_inbox (
                                             id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                             tenant_id      VARCHAR(64),
    provider       VARCHAR(32)  NOT NULL,
    event_id       VARCHAR(128) NOT NULL,
    signature      VARCHAR(256),
    payload        BYTEA        NOT NULL,
    processed_at   TIMESTAMPTZ,
    created_at     TIMESTAMPTZ  NOT NULL DEFAULT now(),
    updated_at     TIMESTAMPTZ  NOT NULL DEFAULT now(),
    CONSTRAINT uq_webhook UNIQUE (provider, event_id)
    );

CREATE INDEX IF NOT EXISTS idx_webhook_created_at ON webhook_inbox(created_at);

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_webhook_set_updated_at'
  ) THEN
CREATE TRIGGER trg_webhook_set_updated_at
    BEFORE UPDATE ON webhook_inbox
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
END IF;
END $$;
