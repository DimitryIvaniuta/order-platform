-- Tokenized payment methods (NO PAN/CVV)
CREATE TABLE IF NOT EXISTS payment_methods (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id        VARCHAR(64)  NOT NULL,
    user_id          UUID         NOT NULL,

    psp              VARCHAR(64)  NOT NULL,
    token            VARCHAR(256) NOT NULL,   -- PSP token or payment method id
    brand            VARCHAR(32),             -- e.g., VISA, MC, AMEX, SEPA, WALLET
    last4            VARCHAR(4),
    exp_month        SMALLINT CHECK (exp_month BETWEEN 1 AND 12),
    exp_year         SMALLINT CHECK (exp_year BETWEEN 1970 AND 2100),
    billing_name     VARCHAR(256),
    billing_address  JSONB,

    created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at       TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT uq_pm_token UNIQUE (tenant_id, psp, token)
    );

CREATE INDEX IF NOT EXISTS idx_payment_methods_user  ON payment_methods(user_id);
CREATE INDEX IF NOT EXISTS idx_payment_methods_psp   ON payment_methods(psp);

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_payment_methods_set_updated_at'
  ) THEN
CREATE TRIGGER trg_payment_methods_set_updated_at
    BEFORE UPDATE ON payment_methods
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
END IF;
END $$;

-- Mandates (e.g., SEPA DD, wallet agreements)
CREATE TABLE IF NOT EXISTS mandates (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id        VARCHAR(64)  NOT NULL,
    user_id          UUID         NOT NULL,

    psp              VARCHAR(64)  NOT NULL,
    mandate_ref      VARCHAR(128) NOT NULL,
    scheme           VARCHAR(32),               -- e.g., SEPA, ACH, BACS
    status           VARCHAR(32)  NOT NULL,

    created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at       TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT uq_mandate UNIQUE (tenant_id, psp, mandate_ref)
    );

CREATE INDEX IF NOT EXISTS idx_mandates_user    ON mandates(user_id);
CREATE INDEX IF NOT EXISTS idx_mandates_status  ON mandates(status);

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_mandates_set_updated_at'
  ) THEN
CREATE TRIGGER trg_mandates_set_updated_at
    BEFORE UPDATE ON mandates
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
END IF;
END $$;
