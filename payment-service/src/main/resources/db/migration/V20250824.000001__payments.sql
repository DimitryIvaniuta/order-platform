-- Common trigger for updated_at across tables (idempotent)
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
RETURN NEW;
END $$;

-- Core payments table
CREATE TABLE IF NOT EXISTS payments (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id        VARCHAR(64)  NOT NULL,
    saga_id          UUID         NOT NULL,
    order_id         BIGINT       NOT NULL,
    user_id          UUID         NOT NULL,
    amount_minor     BIGINT       NOT NULL CHECK (amount_minor >= 0),
    currency_code    CHAR(3)      NOT NULL CHECK (currency_code = upper(currency_code) AND currency_code ~ '^[A-Z]{3}$'),
    status           VARCHAR(32)  NOT NULL,
    psp              VARCHAR(64)  NOT NULL DEFAULT 'FAKE',
    psp_ref          VARCHAR(128),
    failure_code     VARCHAR(64),
    failure_reason   TEXT,
    next_action_json TEXT,
    created_at       TIMESTAMPTZ  NOT NULL DEFAULT now(),
    updated_at       TIMESTAMPTZ  NOT NULL DEFAULT now(),
    CONSTRAINT uk_payment_psp_ref UNIQUE NULLS NOT DISTINCT (tenant_id, psp, psp_ref)
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_payments_tenant        ON payments(tenant_id);
CREATE INDEX IF NOT EXISTS idx_payments_order         ON payments(order_id);
CREATE INDEX IF NOT EXISTS idx_payments_status        ON payments(status);
CREATE INDEX IF NOT EXISTS idx_payments_user          ON payments(user_id);
CREATE INDEX IF NOT EXISTS idx_payments_created_at    ON payments(created_at);

-- Only one ACTIVE payment per (tenant, order). Terminal states may have multiples (history).
CREATE UNIQUE INDEX IF NOT EXISTS uq_active_payment_per_order
    ON payments(tenant_id, order_id);

-- Updated_at trigger
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_payments_set_updated_at'
  ) THEN
CREATE TRIGGER trg_payments_set_updated_at
    BEFORE UPDATE ON payments
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
END IF;
END $$;
