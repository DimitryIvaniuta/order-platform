-- Double-entry ledger journal and entries
CREATE TABLE IF NOT EXISTS ledger_entries (
                                              id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              tenant_id        VARCHAR(64)  NOT NULL,

    journal_id       UUID         NOT NULL, -- groups debit/credit entries of one atomic posting
    account_code     VARCHAR(64)  NOT NULL, -- e.g., AR, PSP_CLEARING, REVENUE, REFUNDS_PAYABLE
    currency_code    CHAR(3)      NOT NULL CHECK (currency_code = upper(currency_code) AND currency_code ~ '^[A-Z]{3}$'),

    debit_minor      BIGINT       NOT NULL DEFAULT 0 CHECK (debit_minor >= 0),
    credit_minor     BIGINT       NOT NULL DEFAULT 0 CHECK (credit_minor >= 0),
    CHECK ( (debit_minor = 0 AND credit_minor > 0) OR (credit_minor = 0 AND debit_minor > 0) ),

    payment_id       BIGINT       REFERENCES payments(id) ON DELETE SET NULL,
    capture_id       BIGINT       REFERENCES captures(id) ON DELETE SET NULL,
    refund_id        BIGINT       REFERENCES refunds(id) ON DELETE SET NULL,

    booking_date     DATE         NOT NULL DEFAULT CURRENT_DATE,
    value_date       DATE,

    created_at       TIMESTAMPTZ  NOT NULL DEFAULT now(),
    updated_at       TIMESTAMPTZ  NOT NULL DEFAULT now()
    );

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_ledger_booking            ON ledger_entries(booking_date);
CREATE INDEX IF NOT EXISTS idx_ledger_account            ON ledger_entries(account_code);
CREATE INDEX IF NOT EXISTS idx_ledger_payment            ON ledger_entries(payment_id);
CREATE INDEX IF NOT EXISTS idx_ledger_tenant_account_dt  ON ledger_entries(tenant_id, account_code, booking_date);

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_ledger_set_updated_at'
  ) THEN
CREATE TRIGGER trg_ledger_set_updated_at
    BEFORE UPDATE ON ledger_entries
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
END IF;
END $$;
